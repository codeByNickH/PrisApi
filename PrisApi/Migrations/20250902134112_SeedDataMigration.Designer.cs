// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrisApi.Data;

#nullable disable

namespace PrisApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250902134112_SeedDataMigration")]
    partial class SeedDataMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PrisApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kött"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mejeri"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Frukt"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Skafferi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fryst"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Bröd"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fisk"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Vegetariskt"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Snacks"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Dryck"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Färdigmat"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Barn"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hem"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Hälsa"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Apotek"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Djur"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Tobak"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Trädgård"
                        });
                });

            modelBuilder.Entity("PrisApi.Models.CategoryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryLists");
                });

            modelBuilder.Entity("PrisApi.Models.PriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ComparePrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("CompareUnit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasDiscount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("PrisApi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("ComparePrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentComparePrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxQuantity")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("MemberDiscount")
                        .HasColumnType("bit");

                    b.Property<string>("MinQuantity")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("OriginalPrice")
                        .HasColumnType("decimal(9, 2)");

                    b.Property<string>("ProdCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(7, 3)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WasDiscount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PrisApi.Models.Scraping.ScraperConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RequestDelayMs")
                        .HasColumnType("int");

                    b.Property<int>("ScraperNavigationId")
                        .HasColumnType("int");

                    b.Property<int>("ScraperSelectorId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UseJavaScript")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ScraperNavigationId");

                    b.HasIndex("ScraperSelectorId");

                    b.ToTable("ScraperConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseUrl = "https://handlaprivatkund.ica.se",
                            RequestDelayMs = 50,
                            ScraperNavigationId = 1,
                            ScraperSelectorId = 1,
                            StoreName = "ica",
                            UseJavaScript = false
                        },
                        new
                        {
                            Id = 2,
                            BaseUrl = "https://www.willys.se/",
                            RequestDelayMs = 50,
                            ScraperNavigationId = 2,
                            ScraperSelectorId = 2,
                            StoreName = "willys",
                            UseJavaScript = false
                        },
                        new
                        {
                            Id = 3,
                            BaseUrl = "https://www.coop.se/handla/varor/",
                            RequestDelayMs = 50,
                            ScraperNavigationId = 3,
                            ScraperSelectorId = 3,
                            StoreName = "coop",
                            UseJavaScript = false
                        },
                        new
                        {
                            Id = 4,
                            BaseUrl = "https://www.citygross.se/",
                            RequestDelayMs = 50,
                            ScraperNavigationId = 4,
                            ScraperSelectorId = 4,
                            StoreName = "city gross",
                            UseJavaScript = false
                        },
                        new
                        {
                            Id = 5,
                            BaseUrl = "https://www.hemkop.se/",
                            RequestDelayMs = 50,
                            ScraperNavigationId = 5,
                            ScraperSelectorId = 5,
                            StoreName = "hemkop",
                            UseJavaScript = false
                        });
                });

            modelBuilder.Entity("PrisApi.Models.Scraping.ScraperNavigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NavAnimals")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavBeverage")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavBreadAndCookies")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavChark")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavCheese")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavDairy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavFishAndSeafood")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavFrozen")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavFruitAndVegetables")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavHealth")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavHomeAndCleaning")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavHygien")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavIceCreamCandyAndSnacks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavKids")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavMeat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavPantry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavPharmacy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavReadyMeals")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavSnacks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavTobacco")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NavVegetarian")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ScraperNavigation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NavAnimals = "Djur",
                            NavBeverage = "Dryck",
                            NavBreadAndCookies = "Bröd & Kakor",
                            NavDairy = "Mejeri & Ost",
                            NavFishAndSeafood = "Fisk & Skaldjur",
                            NavFrozen = "Fryst",
                            NavFruitAndVegetables = "Frukt & Grönt",
                            NavHealth = "Apotek, Hälsa & Skönhet",
                            NavHomeAndCleaning = "Städ, Tvätt & Papper",
                            NavIceCreamCandyAndSnacks = "Glass, Godis & Snacks",
                            NavKids = "Barn",
                            NavMeat = "Kött, Chark & Fågel",
                            NavPantry = "Skafferi",
                            NavReadyMeals = "Färdigmat",
                            NavTobacco = "Tobak",
                            NavVegetarian = "Vegetariskt"
                        },
                        new
                        {
                            Id = 2,
                            NavAnimals = "/sortiment/djur",
                            NavBeverage = "/sortiment/dryck",
                            NavBreadAndCookies = "/sortiment/brod-och-kakor",
                            NavDairy = "/sortiment/mejeri-ost-och-agg",
                            NavFishAndSeafood = "/sortiment/fisk-och-skaldjur",
                            NavFrozen = "/sortiment/fryst",
                            NavFruitAndVegetables = "/sortiment/frukt-och-gront",
                            NavHealth = "/sortiment/halsa-och-skonhet",
                            NavHomeAndCleaning = "/sortiment/hem-och-stad",
                            NavIceCreamCandyAndSnacks = "/sortiment/glass-godis-och-snacks",
                            NavKids = "/sortiment/barn",
                            NavMeat = "/sortiment/kott-chark-och-fagel",
                            NavPantry = "/sortiment/skafferi",
                            NavPharmacy = "/sortiment/apotek",
                            NavReadyMeals = "/sortiment/fardigmat",
                            NavTobacco = "/sortiment/tobak",
                            NavVegetarian = "/sortiment/vegetariskt"
                        },
                        new
                        {
                            Id = 3,
                            NavAnimals = "djurmat-tillbehor",
                            NavBeverage = "dryck",
                            NavBreadAndCookies = "brod-bageri",
                            NavCheese = "ost",
                            NavDairy = "mejeri-agg",
                            NavFishAndSeafood = "fisk-skaldjur",
                            NavFrozen = "frys",
                            NavFruitAndVegetables = "frukt-gronsaker",
                            NavHealth = "halsa-tillskott",
                            NavHomeAndCleaning = "hushall",
                            NavHygien = "skonhet-hygien",
                            NavIceCreamCandyAndSnacks = "godis-glass-snacks",
                            NavKids = "barn",
                            NavMeat = "kott-fagel-chark",
                            NavPantry = "skafferi",
                            NavReadyMeals = "fardigmat-mellanmal",
                            NavTobacco = "tobak",
                            NavVegetarian = "vegetariskt"
                        },
                        new
                        {
                            Id = 4,
                            NavAnimals = "/matvaror/husdjur",
                            NavBeverage = "/matvaror/dryck",
                            NavBreadAndCookies = "/matvaror/brod-och-bageri",
                            NavChark = "/matvaror/chark",
                            NavDairy = "/matvaror/mejeri-ost-och-agg",
                            NavFishAndSeafood = "/matvaror/fisk-och-skaldjur",
                            NavFrozen = "/matvaror/fryst",
                            NavFruitAndVegetables = "/matvaror/frukt-och-gront",
                            NavHealth = "/matvaror/halsa",
                            NavHomeAndCleaning = "/matvaror/hushall",
                            NavHygien = "/matvaror/skonhet-och-hygien",
                            NavIceCreamCandyAndSnacks = "/matvaror/godis",
                            NavKids = "/matvaror/barn",
                            NavMeat = "/matvaror/kott-och-fagel",
                            NavPantry = "/matvaror/skafferiet",
                            NavPharmacy = "/matvaror/apotek-och-receptfria-lakemedel",
                            NavReadyMeals = "/matvaror/kyld-fardigmat",
                            NavSnacks = "/matvaror/snacks",
                            NavTobacco = "/matvaror/tobak",
                            NavVegetarian = "/matvaror/vegetariskt"
                        },
                        new
                        {
                            Id = 5,
                            NavAnimals = "sortiment/djur",
                            NavBeverage = "sortiment/dryck",
                            NavBreadAndCookies = "sortiment/brod-och-kakor",
                            NavDairy = "sortiment/mejeri-ost-och-agg",
                            NavFishAndSeafood = "sortiment/fisk-och-skaldjur",
                            NavFrozen = "sortiment/fryst",
                            NavFruitAndVegetables = "sortiment/frukt-och-gront",
                            NavHealth = "sortiment/halsa-och-skonhet",
                            NavHomeAndCleaning = "sortiment/hem-och-stad",
                            NavIceCreamCandyAndSnacks = "sortiment/glass-godis-och-snacks",
                            NavKids = "sortiment/barn",
                            NavMeat = "sortiment/kott-chark-och-fagel",
                            NavPantry = "sortiment/skafferi",
                            NavPharmacy = "sortiment/apotek",
                            NavReadyMeals = "sortiment/fardigmat",
                            NavTobacco = "sortiment/tobak",
                            NavVegetarian = "sortiment/vegetariskt"
                        });
                });

            modelBuilder.Entity("PrisApi.Models.Scraping.ScraperSelector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryNavSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ChooseStoreSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CloseChooseTabSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CookieBannerSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PickupOptionSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RejectCookiesSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SearchButtonSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SearchStoreSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SelectStoreSelector")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ScraperSelector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryNavSelector = "id=\"nav-menu-button\"",
                            CookieBannerSelector = "id=\"onetrust-banner-sdk\"",
                            PickupOptionSelector = "data-automation-id=\"store-selector-view-pickup\"",
                            RejectCookiesSelector = "id=\"onetrust-reject-all-handler\"",
                            SearchStoreSelector = "class=\"svelte-vapldk\"",
                            SelectStoreSelector = "class=\"store-item__column svelte-uogeuo\""
                        },
                        new
                        {
                            Id = 2,
                            CategoryNavSelector = "class=\"sc-5cf2ead7-2 eTtqdC\"",
                            ChooseStoreSelector = "data-testid=\"delivery-picker-toggle\"",
                            CloseChooseTabSelector = "data-testid=\"slidein-close-button\"",
                            CookieBannerSelector = "id=\"onetrust-banner-sdk\"",
                            PickupOptionSelector = "data-testid=\"delivery-method-pickUpInStore\"",
                            RejectCookiesSelector = "id=\"onetrust-reject-all-handler\"",
                            SearchStoreSelector = "placeholder=\"Sök på butik\"",
                            SelectStoreSelector = "class=\"sc-4b41f1b4-2 cIxYss\""
                        },
                        new
                        {
                            Id = 3,
                            ChooseStoreSelector = "class=\"eJadUlKd\"",
                            CloseChooseTabSelector = "class=\"gUGSFhfR CkqGWkRo ucdesrxw qfkHWAKt\"",
                            CookieBannerSelector = "id=\"cmpbox\"",
                            PickupOptionSelector = "data-key=\"pickup\"",
                            RejectCookiesSelector = "id=\"cmpwelcomebtnno\"",
                            SearchButtonSelector = "class=\"gUGSFhfR UhM7Xoea ucdesrxw qfkHWAKt\"",
                            SearchStoreSelector = "placeholder=\"Ange ditt postnummer\"",
                            SelectStoreSelector = "class=\"yWvaV7fj\""
                        },
                        new
                        {
                            Id = 4,
                            CategoryNavSelector = "href=\"/matvaror\"",
                            ChooseStoreSelector = "class=\"c-change-delivery-link\"",
                            CloseChooseTabSelector = "//*[@id='root']/div[2]/div/div/div/div[2]/div/div[5]/button",
                            CookieBannerSelector = "id=\"CybotCookiebotDialog\"",
                            PickupOptionSelector = "data-automation-id=\"store-selector-view-pickup\"",
                            RejectCookiesSelector = "id=\"CybotCookiebotDialogBodyButtonDecline\"",
                            SearchStoreSelector = "placeholder=\"Sök butik eller stad\"",
                            SelectStoreSelector = "//*[@id='root']/div[2]/div/div/div/div[2]/div/div[4]/div"
                        },
                        new
                        {
                            Id = 5,
                            CookieBannerSelector = "id=\"onetrust-banner-sdk\"",
                            RejectCookiesSelector = "id=\"onetrust-reject-all-handler\""
                        });
                });

            modelBuilder.Entity("PrisApi.Models.Scraping.ScrapingJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NewProducts")
                        .HasColumnType("int");

                    b.Property<int>("ProductsScraped")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreLocation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StoreName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<int>("UpdatedProducts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ScrapingJobs");
                });

            modelBuilder.Entity("PrisApi.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StoreLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreLocationId");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ica Maxi",
                            StoreLocationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Willys",
                            StoreLocationId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stora Coop",
                            StoreLocationId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "City Gross",
                            StoreLocationId = 11
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hemköp",
                            StoreLocationId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ica Kvantum",
                            StoreLocationId = 5
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ica Maxi",
                            StoreLocationId = 6
                        },
                        new
                        {
                            Id = 8,
                            Name = "Willys",
                            StoreLocationId = 7
                        },
                        new
                        {
                            Id = 9,
                            Name = "Willys",
                            StoreLocationId = 8
                        },
                        new
                        {
                            Id = 10,
                            Name = "Stora Coop",
                            StoreLocationId = 9
                        },
                        new
                        {
                            Id = 11,
                            Name = "Coop",
                            StoreLocationId = 10
                        },
                        new
                        {
                            Id = 12,
                            Name = "Ica Maxi",
                            StoreLocationId = 12
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ica Maxi",
                            StoreLocationId = 13
                        },
                        new
                        {
                            Id = 14,
                            Name = "Willys",
                            StoreLocationId = 14
                        },
                        new
                        {
                            Id = 15,
                            Name = "Willys",
                            StoreLocationId = 15
                        },
                        new
                        {
                            Id = 16,
                            Name = "Stora Coop",
                            StoreLocationId = 16
                        },
                        new
                        {
                            Id = 17,
                            Name = "City Gross",
                            StoreLocationId = 17
                        },
                        new
                        {
                            Id = 18,
                            Name = "Hemköp",
                            StoreLocationId = 18
                        },
                        new
                        {
                            Id = 19,
                            Name = "Ica Maxi",
                            StoreLocationId = 19
                        },
                        new
                        {
                            Id = 20,
                            Name = "Ica Supermarket",
                            StoreLocationId = 20
                        },
                        new
                        {
                            Id = 21,
                            Name = "Willys",
                            StoreLocationId = 21
                        },
                        new
                        {
                            Id = 22,
                            Name = "Ica Maxi",
                            StoreLocationId = 22
                        },
                        new
                        {
                            Id = 23,
                            Name = "Stora Coop",
                            StoreLocationId = 23
                        },
                        new
                        {
                            Id = 24,
                            Name = "Hemkop",
                            StoreLocationId = 24
                        },
                        new
                        {
                            Id = 25,
                            Name = "Willys",
                            StoreLocationId = 25
                        });
                });

            modelBuilder.Entity("PrisApi.Models.StoreLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StoreLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Handelsgatan 9",
                            City = "Bollnäs",
                            PostalCode = 82391
                        },
                        new
                        {
                            Id = 2,
                            Address = "Aseavägen 1",
                            City = "Bollnäs",
                            PostalCode = 82130
                        },
                        new
                        {
                            Id = 3,
                            Address = "Norrlandsvägen 90",
                            City = "Bollnäs",
                            PostalCode = 82136
                        },
                        new
                        {
                            Id = 4,
                            Address = "Västanågatan 3",
                            City = "Alfta",
                            PostalCode = 82231
                        },
                        new
                        {
                            Id = 5,
                            Address = "Industrigatan 16",
                            City = "Gävle",
                            PostalCode = 80283
                        },
                        new
                        {
                            Id = 6,
                            Address = "Ingenjörsgatan 1",
                            City = "Gävle",
                            PostalCode = 80293
                        },
                        new
                        {
                            Id = 7,
                            Address = "Södra Kungsvägen 14",
                            City = "Gävle",
                            PostalCode = 80257
                        },
                        new
                        {
                            Id = 8,
                            Address = "Lokförargatan 5",
                            City = "Gävle",
                            PostalCode = 80322
                        },
                        new
                        {
                            Id = 9,
                            Address = "Valbovägen 307",
                            City = "Gävle",
                            District = "Valbo",
                            PostalCode = 81835
                        },
                        new
                        {
                            Id = 10,
                            Address = "Skogmursvägen 35",
                            City = "Gävle",
                            PostalCode = 80269
                        },
                        new
                        {
                            Id = 11,
                            Address = "Ingenjörsgatan 15",
                            City = "Gävle",
                            PostalCode = 80293
                        },
                        new
                        {
                            Id = 12,
                            Address = "Fyrisparksvägen 1",
                            City = "Uppsala",
                            PostalCode = 75267
                        },
                        new
                        {
                            Id = 13,
                            Address = "Visthusvägen 1",
                            City = "Uppsala",
                            PostalCode = 75454
                        },
                        new
                        {
                            Id = 14,
                            Address = "Herrhagsvägen 17",
                            City = "Uppsala",
                            PostalCode = 75267
                        },
                        new
                        {
                            Id = 15,
                            Address = "Björkgatan 4",
                            City = "Uppsala",
                            PostalCode = 75327
                        },
                        new
                        {
                            Id = 16,
                            Address = "Rapsgatan 1",
                            City = "Uppsala",
                            PostalCode = 75323
                        },
                        new
                        {
                            Id = 17,
                            Address = "Stångjärnsgatan 10",
                            City = "Uppsala",
                            PostalCode = 75323
                        },
                        new
                        {
                            Id = 18,
                            Address = "Dragarbrunnsgatan 50",
                            City = "Uppsala",
                            District = "",
                            PostalCode = 75321
                        },
                        new
                        {
                            Id = 19,
                            Address = "Stickvägen 7",
                            City = "Söderhamn",
                            PostalCode = 82640
                        },
                        new
                        {
                            Id = 20,
                            Address = "Norra Hamngatan 11",
                            City = "Söderhamn",
                            PostalCode = 82630
                        },
                        new
                        {
                            Id = 21,
                            Address = "Flöjtvägen 1",
                            City = "Söderhamn",
                            PostalCode = 82640
                        },
                        new
                        {
                            Id = 22,
                            Address = "Blockvägen 1",
                            City = "Hudiksvall",
                            PostalCode = 82434
                        },
                        new
                        {
                            Id = 23,
                            Address = "Furulundsvägen 2",
                            City = "Hudiksvall",
                            PostalCode = 82431
                        },
                        new
                        {
                            Id = 24,
                            Address = "Bryggeriet, Västra Tullgatan 13",
                            City = "Hudiksvall",
                            PostalCode = 82430
                        },
                        new
                        {
                            Id = 25,
                            Address = "Råbyvägen 97",
                            City = "Uppsala",
                            PostalCode = 75460
                        });
                });

            modelBuilder.Entity("PrisApi.Models.CategoryList", b =>
                {
                    b.HasOne("PrisApi.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrisApi.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PrisApi.Models.PriceHistory", b =>
                {
                    b.HasOne("PrisApi.Models.Product", null)
                        .WithMany("PriceHistory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PrisApi.Models.Product", b =>
                {
                    b.HasOne("PrisApi.Models.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("PrisApi.Models.Scraping.ScraperConfig", b =>
                {
                    b.HasOne("PrisApi.Models.Scraping.ScraperNavigation", "ScraperNavigation")
                        .WithMany()
                        .HasForeignKey("ScraperNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PrisApi.Models.Scraping.ScraperSelector", "ScraperSelector")
                        .WithMany()
                        .HasForeignKey("ScraperSelectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScraperNavigation");

                    b.Navigation("ScraperSelector");
                });

            modelBuilder.Entity("PrisApi.Models.Store", b =>
                {
                    b.HasOne("PrisApi.Models.StoreLocation", "StoreLocation")
                        .WithMany("Stores")
                        .HasForeignKey("StoreLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreLocation");
                });

            modelBuilder.Entity("PrisApi.Models.Product", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("PrisApi.Models.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("PrisApi.Models.StoreLocation", b =>
                {
                    b.Navigation("Stores");
                });
#pragma warning restore 612, 618
        }
    }
}
